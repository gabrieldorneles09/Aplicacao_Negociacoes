{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","dados","periodo","concat","catch","Error","erro","get","map","Date","objeto","data","quantidade","valor","console","log","negociacao","getConnection","connection","dao","adiciona","conexao","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import { HttpService } from './HttpService';\nimport { ConnectionFactory } from './ConnectionFactory';\nimport { NegociacaoDao } from '../dao/NegociacaoDao';\nimport { Negociacao } from '../models/Negociacao';\n\nexport class NegociacaoService{\n\n    constructor(){\n        this._http = new HttpService();\n    }\n\n    obterNegociacoes(){\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n            let negociacoes = periodos\n                .reduce((dados, periodo) => dados.concat(periodo), []);\n\n            return negociacoes;\n        }).catch(erro => {\n            throw new Error(erro);\n        });\n    }\n\n    obterNegociacoesDaSemana(){\n\n        return this._http\n            .get('negociacoes/semana')\n            .then(negociacoes => {\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana');\n            });\n    }\n\n    obterNegociacoesDaSemanaAnterior(){\n\n        return this._http\n            .get('negociacoes/anterior')\n            .then(negociacoes => {\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana anterior');\n            });\n    }\n\n    obterNegociacoesDaSemanaRetrasada(){\n\n        return this._http\n            .get('negociacoes/retrasada')\n            .then(negociacoes => {\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana retrasada');\n            });\n    }\n\n    cadastra(negociacao){\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociação adicionada com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível adicional a negociação')\n            });\n    }\n\n    lista() {\n\n        return ConnectionFactory\n            .getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações');\n            });\n    }\n\n    apaga() {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.apagaTodos())\n            .then(() => 'Negociações apagadas com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível apagar as negociações');\n            })\n    }\n\n    importa(listaAtual){\n        \n        return this.obterNegociacoes()\n            .then(negociacoes => \n                negociacoes.filter(negociacao => \n                    !listaAtual.some(negociacaoExistente => \n                        negociacao.isEquals(negociacaoExistente)))\n            )\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível buscar negociações para importar');\n            });\n    }\n\n}"]}